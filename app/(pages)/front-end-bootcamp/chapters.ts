export const chapters = {
    "Workspace setup": [
        "Install Node, yarn, git, vscode, extensions",
        "Linux and bash basics: Introduction to Linux and command line basics",
        "Git and Github basics: Understanding version control and collaborating on Github",
        "Chrome and local server setup: Setting up Chrome browser and local development server",
    ],
    "Basic JavaScript": [
        "What is JS: Introduction to JavaScript as a programming language",
        "History of JS: Brief overview of JavaScript's development",
        "Variables and data types: Working with variables and basic data types",
        "Comments and console.log: Adding comments and debugging with console.log",
        "Functions: Creating and using functions to organize code",
        "Operators: equality, and, or, greater, lesser, modulo: Using various operators for operations",
        "If/else: Implementing conditional statements with if/else",
        "Arrays and indexes: Storing and accessing data using arrays and indexes",
        "Array methods: push, pop, shift, unshift: Modifying arrays using array methods",
        "For loop: Iterating over sequences using for loops",
        "While loop: Repeating code with while loops",
        "Switch statement: Implementing multi-case conditional statements",
        "Ternary operator: Using the ternary operator for concise conditionals",
        "Objects: Creating and working with objects and key-value pairs",
        "Built in Objects: Exploring built-in objects like Date, Math, etc.",
        "typeof operator: Checking the type of a variable using typeof",
        "Type casting: Converting between different data types",
        "Hoisting: Understanding variable and function hoisting",
        "Scope and function stack: Exploring scope and the call stack",
        "Closures: Creating and understanding closures in JavaScript",
        "Recursion: Solving problems using recursive functions",
        "IIFEs: Using Immediately Invoked Function Expressions for scoping",
        "Built in function: Utilizing built-in functions for common tasks",
        '"this" keyword: Understanding the context of "this" in different scenarios',
        'Binding: call, apply, bind: Manipulating the value of "this" using bind, call, and apply',
    ],
    "ES6-ES6": [
        "let and const: Understanding block-scoped variables",
        "Arrow Functions: Writing concise function expressions",
        "Array.forEach: Iterating over arrays with forEach",
        "Array.map: Transforming arrays using map",
        "Array.filter: Filtering arrays based on conditions",
        "Array.slice: Creating new arrays using slice",
        "Array.splice: Modifying arrays using splice",
        "Array.reduce: Reducing arrays to a single value",
        "Array.sort: Sorting arrays with custom comparison",
        "Array.every: Checking if all elements meet a condition",
        "Array.some: Checking if any element meets a condition",
        "Array.indexOf: Finding the index of an element in an array",
        "Array.isArray: Checking if a value is an array",
        "Array.find: Finding the first element that satisfies a condition",
        "for/of: Iterating over iterable objects with for/of loop",
        "The spread operator: Spreading elements of an iterable",
        "Object entries: Converting objects into arrays of key-value pairs",
        "Maps: Working with key-value pairs using Map objects",
        "Sets: Managing collections of unique values with Set objects",
        "Object entries: Converting objects into arrays of key-value pairs",
    ],
    "Object Oriented Programming": [
        "Intro to classes: Understanding the concept of classes and objects",
        "Encapsulation: Wrapping data and methods into a single unit",
        "Abstraction: Simplifying complex systems by hiding unnecessary details",
        "Inheritance: Creating new classes based on existing ones",
        "Polymorphism: Implementing multiple behaviors using a common interface",
        "Constructor: Initializing objects with a constructor function",
        "Extends: Inheriting properties and methods from a parent class",
        "Static props and methods: Using static members shared across instances",
        "Private, public, protected: Controlling access levels to class members",
    ],
    "Algorithms & Data Structures 1: Arrays": [
        "Symmetric Difference",
        "Inventory Update",
        "No repeats please",
        "Pairwise",
        "Contains Duplicate",
        "Valid Anagram",
        "Two Sum",
        "Group Anagrams",
        "Top K Frequent Elements",
        "Product of Array Except Self",
        "Valid Sudoku",
        "Valid Palindrome",
        "Longest Consecutive Sequence",
        "Two Sum II Input Array is Sorted",
        "Typed Arrays",
    ],
    "HTML & CSS: Beginner": [
        "Head and Body: Structuring a basic HTML document with head and body",
        "Headings & Paragraphs: Creating meaningful headings and paragraphs in HTML",
        "Lists: Organizing content using ordered and unordered lists",
        "Images: Embedding images to enhance visual content",
        "Anchors and Buttons: Crafting interactive elements with hyperlinks and buttons",
        "Divs and Spans: Utilizing divs and spans for improved layout and styling",
        "Design Principles: Understanding fundamental design principles for effective web layouts",
        "Basic CSS: Styling HTML elements with basic CSS properties",
        "Flexbox: Mastering flexible layouts using CSS Flexbox",
        "Visibility and display",
        "Grid: Creating responsive grids with CSS Grid",
        "CSS States: Applying styles to different states of elements (hover, active, etc.)",
        "Script: Enhancing interactivity with JavaScript code integrated into HTML documents",
    ],
    "The DOM": [
        "What is the DOM: Understanding the Document Object Model",
        "DOM data types: Exploring the different data types in the DOM",
        "Getting elements: Selecting and manipulating DOM elements",
        "Creating and setting elements: Dynamically creating and modifying DOM elements",
        "Other DOM APIs: Exploring additional DOM interfaces and methods",
        "Events: Handling user interactions and events with the DOM",
        "Iterating with the DOM: Looping through and processing DOM elements",
    ],
    "First project: Simple website": [
        // No specific items mentioned
    ],

    "Algorithms & Data Structures 2: Stacks, Queues, Hash Tables": [
        "Learn how a Stack Works",
        "Create a Stack Class",
        "Create a Queue Class",
        "Create a Priority Queue",
        "Create a Circular Queue",
        "Create a Set Class",
        "Create a Union on Two Sets",
        "Perform an Intersection on Two Sets of Data",
        "Perform an Difference on Two Sets of Data",
        "Perform an Subset Check on Two Sets of Data",
        "Create a Map Data Structure",
        "Create a Hash Table",
        "Valid Parentheses",
        "Min Stack",
        "Evaluate Reverse Polish Notation",
        "Generate Parentheses",
        "Daily Temperatures",
        "Car Fleet",
        "Largest Rectangle in Histogram",
    ],
    "Understanding APIs, databases, and servers": [
        "Basic backend structure: Exploring components of a backend system",
        "NodeJs: Introduction to Node.js for server-side JavaScript development",
        "SQL and NoSQL: Understanding different types of databases",
        "REST APIs: Designing and building RESTful APIs for communication",
        "NPM: Managing dependencies and packages with Node Package Manager",
        "Module bundler: Using tools like Webpack for bundling and optimizing code",
        "Basic Node app: Building a simple Node.js application for server tasks",
    ],
    "Basic TypeScript": [
        "What is TypeScript: Introduction to TypeScript and its benefits",
        "Installing and running TypeScript: Setting up the TypeScript environment",
        "Types: Understanding basic data types in TypeScript",
        "Combining types: Creating complex types using unions and intersections",
        "Functions: Typing functions and function parameters",
        "Type guards: Ensuring type safety with type guards",
        "Interfaces: Defining and implementing interfaces for structured data",
        "Classes: Using classes to create object-oriented structures",
        "Generics: Writing flexible and reusable code with generics",
        "Decorators: Enhancing classes and properties using decorators",
        "Best practices: Following TypeScript coding conventions and best practices",
    ],

    RegEx: [
        "Search: Using regular expressions to search for patterns in strings",
        "Replace: Replacing matched patterns with desired content",
        "Common patterns: Exploring common regular expression patterns",
        "Test: Testing strings against regular expressions for pattern matching",
    ],
    "HTML & CSS: Intermediate": [
        "Semantic HTML: Being precise in defining the project structure",
        "Forms: Creating interactive forms with HTML and CSS",
        "Text Inputs: Creating single-line text input fields",
        "Textarea: Implementing multi-line text input areas",
        "Radio Buttons: Creating mutually exclusive selection options",
        "Checkboxes: Enabling multiple selection choices",
        "Select Dropdowns: Designing dropdown menus for selection",
        "Form Elements: Organizing inputs within HTML forms",
        "Labels and Accessibility: Associating labels with inputs for improved accessibility",
        "SEO: Optimizing web pages for search engines",
        "A11Y: Ensuring web accessibility and usability",
        "PostCSS: Enhancing CSS with PostCSS plugins and tools",
        "SASS: Leveraging the power of SASS for more efficient and modular CSS",
    ],
    "Async JS": [
        "How browsers work: Understanding the browser's architecture and rendering process",
        "Garbage collector and memory management: Exploring memory allocation and cleanup",
        "Event loop: Learning how the event loop handles asynchronous operations",
        "Callbacks: Using callbacks for asynchronous programming",
        "Callbacks reminder: Reinforcing the concept of callbacks for asynchronous tasks",
        "Asynchronous: Handling asynchronous tasks in JavaScript",
        "Promises: Managing asynchronous operations using promises",
        "Async/Await: Simplifying asynchronous code using async/await syntax",
    ],
    "Requests and Responses": [
        "XMLHttp: Making HTTP requests using the XMLHttp object",
        "Request: Sending HTTP requests to servers",
        "Response: Handling server responses",
        "Fetch API: Using the modern Fetch API for making network requests",
        "Headers and Parameters: Customizing requests with headers and query parameters",
        "Error Handling: Managing errors and exceptions in network operations",
        "JSON: Working with JSON data format",
        "CORS and Security: Exploring Cross-Origin Resource Sharing and security considerations",
    ],

    "Second project: API website": [
        // No specific items mentioned
    ],
    "Algorithms & Data Structures 3: Sorting and Linked Lists": [
        "Bubble sort",
        "Selection sort",
        "Insertion sort",
        "Quick sort",
        "Merge sort",
        "Work with nodes in a Linked List",
        "Create a Linked List Class",
        "Search within a Linked List",
        "Remove Elements from a Linked List by Index",
        "Add Elements at a specific index in a Linked List",
        "Create a Doubly Linked List",
        "Reverse a Doubly Linked List",
    ],

    "Testing with Jest": [
        "Setup Jest: Configuring Jest for testing in your project",
        "Matchers: Using matchers to perform assertions in test cases",
        "Async code: Testing asynchronous functions and handling promises",
        "Setup and teardown: Preparing the environment before and after tests",
        "Mock functions: Creating and using mock functions to isolate code",
    ],

    "Third project: Chess website": [
        // No specific items mentioned
    ],

    "Algorithms & Data Structures 4: Binary Search and Sliding Window": [
        "Binary search",
        "3Sum",
        "Container With Most Water",
        "Trapping Rain Water",
        "Search a 2d Matrix",
        "Koko Eating bananas",
        "Find minimum in rotated sorted array",
        "Search in a rotated sorted array",
        "Time based key value store",
        "Median of Two sorted arrays",
        "Best time to buy and sell stock",
        "Longest substring without repeating characters",
        "Longest repeating character replacement",
        "Permutation in string",
        "Minimum window substring",
        "Sliding window maximum",
    ],

    "React basics and setup": [
        "What is React: Understanding the purpose and benefits of React",
        "How does React work: Exploring the virtual DOM and reconciliation process",
        "Vite: Introduction to the Vite build tool for modern web development",
        "JSX: Using JSX for writing declarative and expressive React components",
        "Components: Building reusable UI blocks with React components",
        "Props: Passing data and behavior to components using props",
        "Events: Handling user interactions with event handling in React",
        "Conditionals: Using conditional rendering to display content dynamically",
        "Rendering lists: Mapping data to components for efficient list rendering",
        "Routing: Navigating between different views using React Router",
    ],
    "React Class Components": [
        "Constructor: Initializing component state, bindings, and props handling",
        "Mounting: Component lifecycle phase when the component is created",
        "Rendering: Displaying content and handling updates in the DOM",
        "Updating: Managing changes and re-renders based on state or props changes",
        "Lifecycle Methods: Exploring methods like shouldComponentUpdate and componentDidUpdate",
        "Unmounting: Cleanup and resource release when the component is removed",
        "Class Component State: Managing local state within class-based components",
        "Component Composition: Composing complex UIs by nesting class components",
        "Error Handling: Implementing error boundaries for better error handling",
        "Optimization Techniques: Optimizing class components for better performance",
        "Ref Handling: Using refs to access DOM elements and manage focus",
    ],
    "React Hooks": [
        "Introduction to React Hooks and their benefits",
        "useState: Managing component state in functional components",
        "useEffect: Handling side effects and component lifecycle",
        "useRef: Accessing and manipulating the DOM",
        "useCallback: Optimizing performance with memoized callbacks",
        "useMemo: Caching values for performance optimization",
        "useReducer: Managing complex state logic with reducers",
        "useContext: Sharing data across components efficiently",
        "Custom Hooks: Creating custom hooks to encapsulate reusable logic",
        "Rules of Hooks: Understanding and adhering to the rules of using hooks",
        "Hooks vs. Class Components: Comparing hooks with class component approaches",
        "State and Lifecycle in Hooks: How hooks address state and lifecycle management",
        "Advanced Hooks Patterns: Exploring advanced patterns like useLayoutEffect",
        "Hooks Best Practices: Following best practices for clean and maintainable code",
    ],

    Redux: [
        "Introduction to Redux and its core principles for state management",
        "Redux Store, Actions, and Reducers: Understanding the fundamental components",
        "Managing Application State: Implementing and organizing state using Redux",
        "Connecting React Components: Integrating React components with the Redux store",
        "Async Actions and Thunk: Managing asynchronous data fetching using Redux Thunk middleware",
        "Redux DevTools: Debugging and inspecting Redux state changes with DevTools",
        "Structuring Redux Code: Best practices for organizing Redux code for scalability",
        "Redux in Real Projects: Evaluating scenarios when Redux is a valuable choice",
        "Reducers and Immutability: Adhering to immutable data principles in reducers",
        "Selector Functions: Creating efficient selectors for accessing and transforming state",
        "Performance Optimization: Techniques for optimizing performance in Redux applications",
        "Redux Toolkit: Introducing Redux Toolkit for simplified Redux setup",
    ],
    "React Testing Library": [
        "Introduction to testing React components",
        "Writing unit tests using React Testing Library",
        "Testing user interactions and behavior",
        "Mocking and simulating data and events",
        "Snapshot testing and component rendering",
        "Testing asynchronous code and async utilities",
        "Best practices for effective component testing",
        "Integrating testing into your development workflow",
        "Common pitfalls and how to avoid them",
    ],
    "Algorithms & Data Structures 5: Trees": [
        "Add a New element to a Binary Search Tree",
        "Find the minimum and maximum value in a binary search tree",
        "Check if an element is present in a binary search tree",
        "Check if tree is binary search tree",
        "Find the minimum and maximum height in a binary search tree",
        "Use Depth First Search in a binary search tree",
        "Use Breath first Search in a Binary Search Tree",
        "Delete a Leaf Node in a Binary Search Tree",
        "Delete a Node with one children in Binary Search Tree",
        "Delete a Node with Two Children in Binary Search Tree",
        "Invert a Binary Tree",
    ],

    "Authentication and Security Concepts": [
        "Introduction to Authentication and Security: Understanding the importance of security in web applications",
        "Authentication vs. Authorization: Differentiating between user identity and access rights",
        "Common Security Threats: Exploring common vulnerabilities like XSS, CSRF, SQL injection, etc.",
        "User Authentication Methods: Learning about token-based authentication, sessions, OAuth, etc.",
        "Hashing and Encryption: Using techniques to secure sensitive data",
        "Secure Communication: Ensuring data security during transmission with HTTPS and SSL",
        "Security Best Practices: Following guidelines for secure coding, input validation, and more",
        "Data Privacy and GDPR: Understanding data protection laws and user privacy concerns",
        "Identity Providers: Integrating third-party identity providers for single sign-on (SSO)",
    ],
    CMS: [
        "About WordPress",
        "Comparison of Wix, Webflow, and Squarespace",
        "Introduction to Contentful",
        "Using Sanity as a CMS",
        "Managing content with Shopify",
        "Setting up and defining schema in Contentful",
        "Working with the Contentful API",
    ],
    "Fourth project: Personal Portfolio": [
        // No specific items mentioned
    ],
    Deployment: [
        "Understanding Hosting, domains, DNS, SSL",
        "Deploying applications with Netlify",
        "Deploying applications with Vercel",
    ],
    LinkedIn: [
        "Building a strong profile",
        "Finding jobs and opportunities",
        "Connecting to people with simmilar interests",
    ],
    "Algorithms & Data Structures 6: Backtracking": [
        "Subsets",
        "Combination Sum",
        "Permutations",
        "Subsets II",
        "Combination Sum II",
        "Word Search",
        "Create a Trie Search Tree",
        "Implement Trie Prefix Tree",
        "Design add and search words data structure",
        "Word Search II",
    ],
};

export default chapters;
